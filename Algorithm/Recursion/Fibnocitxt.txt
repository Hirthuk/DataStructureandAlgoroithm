
## Function: `fibonacciRecursive(n)`
This function computes the Fibonacci number at position `n` using recursion.

### Fibonacci Series:
```
0, 1, 1, 2, 3, 5, 8, 13, 21, ...
```
- `fibonacciRecursive(0) → 0`
- `fibonacciRecursive(1) → 1`
- `fibonacciRecursive(2) → 1 (1 + 0)`
- `fibonacciRecursive(3) → 2 (1 + 1)`
- `fibonacciRecursive(4) → 3 (2 + 1)`

---

### Step-by-step Execution for `fibonacciRecursive(4)`

1. **Function Call: `fibonacciRecursive(4)`**
   - Since `n = 4`, it does **not** satisfy `n < 2`, so the function calls itself twice:
     ```
     fibonacciRecursive(4) = fibonacciRecursive(3) + fibonacciRecursive(2)
     ```

2. **Function Call: `fibonacciRecursive(3)`**
   - `n = 3`, so the function calls itself:
     ```
     fibonacciRecursive(3) = fibonacciRecursive(2) + fibonacciRecursive(1)
     ```

3. **Function Call: `fibonacciRecursive(2)`**
   - `n = 2`, so the function calls itself:
     ```
     fibonacciRecursive(2) = fibonacciRecursive(1) + fibonacciRecursive(0)
     ```

4. **Function Call: `fibonacciRecursive(1)`**
   - `n = 1`, which satisfies the base case, so it **returns `1`**.

5. **Function Call: `fibonacciRecursive(0)`**
   - `n = 0`, which satisfies the base case, so it **returns `0`**.

   Now we start **popping** from the stack:
   ```
   fibonacciRecursive(2) = 1 + 0 = 1
   ```

6. **Function Call: `fibonacciRecursive(1)` (from step 2)**
   - `n = 1`, which satisfies the base case, so it **returns `1`**.

   ```
   fibonacciRecursive(3) = 1 + 1 = 2
   ```

7. **Function Call: `fibonacciRecursive(2)` (from step 1)**
   - We already computed `fibonacciRecursive(2) = 1` in step 5.

   ```
   fibonacciRecursive(4) = 2 + 1 = 3
   ```

---

### Call Stack Representation:

```
fibonacciRecursive(4)
│
├── fibonacciRecursive(3)
│   ├── fibonacciRecursive(2)
│   │   ├── fibonacciRecursive(1) → 1   (returns)
│   │   ├── fibonacciRecursive(0) → 0   (returns)
│   │   └── Result: 1 + 0 = 1            (popped)
│   │
│   ├── fibonacciRecursive(1) → 1        (returns)
│   ├── Result: 1 + 1 = 2                (popped)
│
├── fibonacciRecursive(2)
│   ├── fibonacciRecursive(1) → 1        (returns)
│   ├── fibonacciRecursive(0) → 0        (returns)
│   ├── Result: 1 + 0 = 1                (popped)
│
├── Result: 2 + 1 = 3                    (popped)
```

---

### How Functions are Popped from the Stack:
1. `fibonacciRecursive(1)` and `fibonacciRecursive(0)` return **1 and 0**, so `fibonacciRecursive(2)` returns **1**.
2. `fibonacciRecursive(2)` and `fibonacciRecursive(1)` return **1 and 1**, so `fibonacciRecursive(3)` returns **2**.
3. `fibonacciRecursive(3)` and `fibonacciRecursive(2)` return **2 and 1**, so `fibonacciRecursive(4)` returns **3**.

Final **output**:
```js
console.log(answer); // 3