An algorithm is a finite sequence of well-defined instructions designed to solve a problem or perform a task. It operates on input data, processes it through logical steps, and produces an output. Algorithms are
essential in computer science and data structures to optimize performance and efficiency.

Recursion

### **What is Recursion?**  
Recursion is when a **function calls itself** to solve a problem in smaller steps until it reaches a stopping condition.  

### **Example of Recursion**
```javascript
function countDown(n) {
  if (n <= 0) return;  // Base case (stopping condition)
  console.log(n);
  countDown(n - 1);  // Recursive case
}

countDown(5);
```
**Output:**  
```
5  
4  
3  
2  
1  
```
---

### **What is Stack Overflow?**  
A **stack overflow** happens when a function keeps calling itself **without stopping**, filling up the computer‚Äôs memory.

### **How Does Stack Overflow Happen?**  
Example of an infinite recursion (causing stack overflow):  
```javascript
function infiniteRecursion() {
  console.log("Hello");
  infiniteRecursion(); // No base case -> never stops!
}

infiniteRecursion();
```
This function **never stops**, causing the call stack to overflow.

---

### **How to Prevent Stack Overflow?**  
Follow these **basic rules** when using recursion:  
‚úÖ **Always have a base case** (stopping condition).  
‚úÖ **Ensure recursive calls move towards the base case** (modify input).  
‚úÖ **Avoid unnecessary deep recursion** (use loops if possible).  

---

### **Correct Recursive Structure**
A **recursion function** should have:
1. **Base Case** ‚Üí Stops recursion.  
2. **Recursive Case** ‚Üí Calls itself with a smaller problem.  

Example:
```javascript
function sum(n) {
  if (n === 0) return 0; // Base case
  return n + sum(n - 1); // Recursive case
}

console.log(sum(5)); // Output: 15 (5+4+3+2+1)

There is call stack in runtime we discused this topic in stack and queue. This call stack stores
the function call one by one. In recursion it will be kept on adding without the base case to stop the
function calling. This will cause stack overflow to avoid this we have use base case.
Once it reaches the base all the before recursive which is not matching base case will be stacked and 
called one by one after return. This will return undefined to avoid the previous function call
we have to return the function itesef in the return. So two return mostly in the base class one actual return
and recursive class one return which returns the function or modified function.

Here‚Äôs your corrected and consolidated note with improved clarity and structure:  

---

### **Understanding Recursion and Call Stack**  

- In JavaScript, the **call stack** stores function calls **one by one** in execution order.  
- In recursion, **each recursive call is added to the call stack** until it reaches a stopping condition (base case).  
- **Without a base case, recursion continues indefinitely, leading to stack overflow** (memory overuse).  
- Once the base case is reached, the **stack starts unwinding**, executing the stored function calls **one by one** in reverse order.  

### **Avoiding Stack Overflow**  
- To prevent stack overflow, **always include a base case** that stops recursion.  
- **Each recursive call must progress towards the base case** to ensure termination.  

### **Returning Values in Recursion**  
- If a recursive function does not explicitly return a value, it **returns `undefined`** by default.  
- To **pass values back through recursive calls**, always return the function call in the recursive case.  
- **Typically, there are two `return` statements:**  
  1. **Base Case Return** ‚Üí Returns the final result.  
  2. **Recursive Case Return** ‚Üí Returns the function call or a modified value.  


function countdown(n) {
  if (n === 0) {  // Base case: Stop when n reaches 0
    console.log("Done!");
    return;
  }
  console.log(n); // Print current number
  countdown(n - 1); // Recursive call with reduced value
}

countdown(5);

Why This Example Justifies Recursion Concepts**  

1. **Base Case:** `if (n === 0) return;` ‚Üí Stops recursion when `n` reaches `0`, preventing infinite calls.  
2. **Recursive Case:** `countdown(n - 1);` ‚Üí Calls itself with a reduced value (`n - 1`), ensuring progress.  
3. **Call Stack Behavior:** Each function call is stored in the stack until the base case is met, then they resolve in reverse order.  
4. **Prevention of Stack Overflow:** The base case ensures that recursion stops at the right time.  
5. **Clear Execution Flow:** Each recursive call performs a simple task (printing `n`), making it easy to follow.  

When to use recursion
## **Recursive vs. Iterative Approach**  

### **1Ô∏è‚É£ Recursive Approach**
A recursive function is a function that **calls itself** until it reaches a base case. It is useful when a problem can be **divided into smaller subproblems** of the same nature.  

**Example: Fibonacci using recursion**
```js
function fibonacciRecursive(n) {
    if (n < 2) return n;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

console.log(fibonacciRecursive(5)); // Output: 5
```
üîπ **How it works:**  
Each function call creates a new instance of the function in memory (Call Stack). The function keeps calling itself until it reaches the base case (`n < 2`). Then, it **pops** the stack, returning values step by step.

### **2Ô∏è‚É£ Iterative Approach**
An iterative solution **uses loops** (`for`, `while`) instead of function calls.

**Example: Fibonacci using iteration**
```js
function fibonacciIterative(n) {
    if (n < 2) return n;
    
    let a = 0, b = 1, temp;
    for (let i = 2; i <= n; i++) {
        temp = a + b;
        a = b;
        b = temp;
    }
    return b;
}

console.log(fibonacciIterative(5)); // Output: 5
```
üîπ **How it works:**  
Instead of making multiple function calls (which use stack memory), it **stores previous values in variables** and updates them in a loop. This makes it more efficient in terms of time and space.

---

## **üîç Recursive vs. Iterative Comparison**
| Feature          | Recursive Approach | Iterative Approach |
|----------------|------------------|----------------|
| **Ease of Writing** | Easier for problems like tree traversal | Requires loops and tracking state |
| **Readability** | More intuitive for divide-and-conquer problems | Sometimes more complex |
| **Performance** | Can be slower due to function call overhead | Faster as it avoids function calls |
| **Memory Usage** | Uses stack memory (risk of stack overflow) | Uses constant memory (`O(1)`) |
| **Complexity** | Can lead to exponential time complexity | Often more optimized |

---

## **üõ† When to Use Recursion?**
You should use recursion when:
1. **The problem can be broken into smaller subproblems**  
   - Example: Fibonacci, Factorial, Tower of Hanoi, Divide and Conquer problems.  
2. **Tree or Graph Traversals are required**  
   - Example: Binary Tree Preorder, Inorder, and Postorder traversal.  
3. **When backtracking is needed**  
   - Example: Solving a maze, N-Queens Problem, Sudoku Solver.  
4. **When using Divide and Conquer**  
   - Example: Merge Sort, Quick Sort, Binary Search.  
5. **When the problem has an unknown depth**  
   - Example: DFS (Depth First Search) in Graph Traversal.

---

## **üìù Rules to Follow Before Choosing Recursion**
### ‚úÖ **1. Identify the Base Case**  
Every recursive function **must** have a base case to stop recursion.  
```js
if (n === 0) return 1; // Base case
```
Without this, the function will call itself **infinitely** and crash the program.

### ‚úÖ **2. Ensure Each Recursive Call Moves Towards the Base Case**  
Each call should **reduce** the problem‚Äôs size.
```js
return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
```
Here, `n` **reduces with each call**.

### ‚úÖ **3. Consider Stack Overflow Risk**  
Recursion uses **extra memory** for function calls, and excessive recursion can lead to **stack overflow**. If `n` is large, iterative solutions are better.

### ‚úÖ **4. Optimize with Memoization (If Necessary)**  
If a recursive function calls the **same subproblem multiple times**, use **memoization** to store already computed results.  
Example: **Optimized Fibonacci with Memoization**  
```js
function fibonacciMemo(n, memo = {}) {
    if (n < 2) return n;
    if (memo[n]) return memo[n]; // Check if already computed
    
    memo[n] = fibonacciMemo(n - 1, memo) + fibonacciMemo(n - 2, memo);
    return memo[n];
}

console.log(fibonacciMemo(50)); // Much faster than normal recursion!
```

---

## **üéØ Final Thought: When to Use Recursion or Iteration?**
| Situation | Choose Recursion | Choose Iteration |
|-----------|----------------|----------------|
| **Small Input Size** | ‚úÖ | ‚úÖ |
| **Larger Input (Efficiency Needed)** | ‚ùå (unless optimized with memoization) | ‚úÖ |
| **Divide & Conquer (Merge Sort, Quick Sort)** | ‚úÖ | ‚ùå |
| **Tree/Graph Traversal** | ‚úÖ | ‚ùå |
| **Simple Problems (Loop-Based)** | ‚ùå | ‚úÖ |

‚úÖ **Rule of Thumb:**  
- If the problem **naturally divides into smaller subproblems**, use recursion.  
- If performance is critical and recursion adds unnecessary overhead, use iteration.