### Rules for Determining Space Complexity  

1. **Worst Case**:  
   - Analyze the maximum memory usage for the largest input size.  
   - Example: If you create an array to store all unique elements of an input array, the space complexity is \( O(n) \) in the worst case when all elements are unique.  

2. **Remove Constants**:  
   - Ignore constant space usage because it doesn't scale with input size.  
   - Example: If an algorithm always allocates a fixed-size buffer (e.g., 100 elements), the space complexity is \( O(1) \).  

3. **Drop Non-Dominants**:  
   - Focus on the term that grows the fastest with input size.  
   - Example: If an algorithm uses \( O(n^2) \) for a matrix and \( O(n) \) for a separate array, the space complexity is \( O(n^2) \).  

4. **Different Forms of Input**:  
   - Consider space usage for each input independently if they affect memory differently.  
   - Example: For two input arrays of sizes \( n \) and \( m \), storing their Cartesian product takes \( O(n \cdot m) \).  

These rules guide simplifying and understanding space complexity in Big-O notation, similar to time complexity analysis.