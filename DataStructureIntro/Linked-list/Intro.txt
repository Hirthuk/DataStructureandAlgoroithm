All about linked list

## 🔗 **Linked List: Complete Explanation**  

A **Linked List** is a linear data structure where elements (nodes) are stored in **non-contiguous** memory locations. Each node contains:  
- **Data** (the actual value stored)  
- **Pointer (next)** (a reference to the next node)  

Unlike arrays, linked lists are **dynamic** in size and provide efficient insertions/deletions.

---

# 🚀 **1. Why Use Linked Lists?**
| Feature          | Array | Linked List |
|-----------------|-------|-------------|
| **Memory Allocation** | Contiguous (fixed size) | Non-contiguous (dynamic size) |
| **Insertion/Deletion** | Costly (O(n) for shifting) | Efficient (O(1) if inserting at head) |
| **Access Time** | O(1) (direct indexing) | O(n) (sequential search required) |
| **Memory Waste** | Wastes memory if oversized | Uses memory dynamically |

### **When to Use a Linked List?**
✅ When you need **fast insertions and deletions**.  
✅ When you **don’t know the size** beforehand (dynamic memory).  
✅ When continuous memory allocation is not available.  

### **When NOT to Use Linked List?**
❌ If **random access** (O(1) indexing) is needed, use an **Array**.  
❌ If **searching is the primary operation**, use a **Hash Table** (O(1) lookup).  

---

# 🔥 **2. Types of Linked Lists**
### **1️⃣ Singly Linked List**
- Each node has **one pointer** (next) to the next node.
- Traversal is **one-directional**.

📌 **Example Structure:**
```
HEAD → [10 | next] → [20 | next] → [30 | next] → NULL
```

📌 **Basic Operations:**
- **Insertion** (O(1) at head, O(n) elsewhere)
- **Deletion** (O(1) at head, O(n) elsewhere)
- **Search** (O(n))

---

### **2️⃣ Doubly Linked List (DLL)**
- Each node has **two pointers**:  
  1️⃣ `next` (points to next node)  
  2️⃣ `prev` (points to previous node)  
- **Two-directional traversal** is possible.

📌 **Example Structure:**
```
NULL ← [10 | prev | next] ←→ [20 | prev | next] ←→ [30 | prev | next] → NULL
```

📌 **Advantages Over Singly Linked List**
✅ **Faster Deletion (O(1))** (since `prev` pointer is available).  
✅ **Traversal in both directions**.  
✅ **More memory usage (O(n) extra for `prev` pointers)**.  

---

### **3️⃣ Circular Linked List**
- **Last node points to the first node**, forming a **circle**.
- Can be **singly or doubly linked**.
- Used in **round-robin scheduling**, buffer management.

📌 **Example (Singly Circular Linked List)**:
```
[10 | next] → [20 | next] → [30 | next] ↻ (points back to head)
```

---

# 🛠 **3. Linked List Operations (With Code)**
## **1️⃣ Insert at Beginning (Head)**
- **O(1) Time Complexity**  
```javascript
prepend(value) {
    const newNode = { value: value, next: this.head };
    this.head = newNode;
    this.length++;
}
```

📌 **Why is it O(1)?**  
- We **don't need to shift elements** (unlike arrays).  
- Just **update head** to the new node.

---

## **2️⃣ Insert at End (Tail)**
- **O(1) Time Complexity (if tail pointer exists)**
```javascript
append(value) {
    const newNode = { value: value, next: null };
    this.tail.next = newNode;
    this.tail = newNode;
    this.length++;
}
```

📌 **Why is it O(1)?**  
- We **directly update tail** instead of traversing.

---

## **3️⃣ Insert at Any Position**
- **O(n) Time Complexity**  
```javascript
insert(index, value) {
    if (index < 0 || index > this.length) return;
    let newNode = { value: value, next: null };
    let currentNode = this.head;
    for (let i = 0; i < index - 1; i++) {
        currentNode = currentNode.next;
    }
    newNode.next = currentNode.next;
    currentNode.next = newNode;
    this.length++;
}
```

📌 **Why is it O(n)?**  
- We need to **traverse** the list to `index - 1` before inserting.

---

## **4️⃣ Delete a Node**
- **O(n) (traversal needed), O(1) (at head)**  
```javascript
remove(index) {
    if (index < 0 || index >= this.length) return;
    let currentNode = this.head;
    if (index === 0) {
        this.head = this.head.next;
        this.length--;
        return;
    }
    let previousNode = null;
    for (let i = 0; i < index; i++) {
        previousNode = currentNode;
        currentNode = currentNode.next;
    }
    previousNode.next = currentNode.next;
    this.length--;
}
```

📌 **Why is deleting at the head O(1)?**  
- We just **move the head** to the next node.

📌 **Why is deleting in the middle O(n)?**  
- **Traversal required** to reach `index - 1`.

---

# 🔥 **4. Linked List vs Other Data Structures**
| Feature             | Array | Linked List |
|---------------------|-------|-------------|
| **Random Access**   | ✅ O(1) | ❌ O(n) |
| **Insertion/Deletion (Head)** | ❌ O(n) (shifting) | ✅ O(1) |
| **Insertion/Deletion (Middle)** | ❌ O(n) | ❌ O(n) |
| **Insertion at Tail** | ✅ O(1) (if space available) | ✅ O(1) (if tail pointer) |
| **Memory Overhead** | ✅ Less (no extra pointers) | ❌ More (extra space for pointers) |
| **Cache Performance** | ✅ Better (contiguous memory) | ❌ Poor (non-contiguous) |

---

# **🔥 5. Use Cases of Linked Lists**
✅ **Dynamic Data Storage** → When memory is fragmented (no contiguous allocation).  
✅ **Undo/Redo in Applications** → Use a **Doubly Linked List**.  
✅ **Browser Forward/Backward Navigation** → DLL used for **back & forward** traversal.  
✅ **Music/Video Playlists** → Circular Linked List for looping playback.  
✅ **Memory Management (OS Paging, Garbage Collection)** → Linked lists used for managing free memory blocks.  
✅ **Graph Adjacency List Representation** → Each node stores neighbors dynamically.

---

# **🔥 6. Linked List in DSA Interviews**
📌 **Common Questions:**  
1️⃣ Reverse a Linked List  
2️⃣ Detect a Cycle in a Linked List (**Floyd’s Cycle Algorithm**)  
3️⃣ Merge Two Sorted Linked Lists  
4️⃣ Find the Middle Element of a Linked List  
5️⃣ Remove N-th Node from End of List  

📌 **Key Concepts to Master:**  
- **Recursion** in Linked Lists  
- **Two-pointer techniques (fast & slow pointers)**  
- **Hashing for cycle detection**  

---

# 🎯 **Final Thoughts**
✅ **When to Use?** → When insertions & deletions matter more than indexing.  
✅ **When to Avoid?** → When fast random access (O(1)) is required.  
✅ **Key Strength?** → Flexibility in dynamic memory allocation.  

📌 **DSA Tip:** **Understand linked list variations (Singly, Doubly, Circular)** and when each is useful! 🚀  

Would you like a **detailed implementation in Java** as well? 🔥