In JavaScript, reference types refer to objects and arrays that store references to the memory 
location where the actual data is stored, rather than storing the data itself directly in the variable.

When you assign a reference type (e.g., an object or array) to a variable, the variable doesnâ€™t hold 
the actual object itself.
Instead, it holds a reference (or pointer) to the location in memory where the object is stored.

Reference types in JavaScript


In JavaScript, **reference types** refer to objects and arrays, where variables hold a reference (or pointer)
 to the memory location of the data rather than the actual data itself. 
This contrasts with **primitive types** like `string`, `number`, `boolean`, etc., where variables store the actual value.

### Characteristics of Reference Types:
1. **Stored in Heap Memory**: The data is stored in the heap, and the variable contains a reference to that memory location.
2. **Mutable**: Reference types can be modified directly without changing the reference.
3. **Copied by Reference**: Assigning one reference variable to another creates a new reference to the 
same memory location. Changes in one reference are reflected in the other.

---

### Common Reference Types:
1. **Objects**:
   ```javascript
   const obj1 = { name: "Alice" };
   const obj2 = obj1; // Both point to the same object
   obj2.name = "Bob";
   console.log(obj1.name); // Output: Bob
   ```

2. **Arrays**:
   ```javascript
   const arr1 = [1, 2, 3];
   const arr2 = arr1; // Both point to the same array
   arr2.push(4);
   console.log(arr1); // Output: [1, 2, 3, 4]
   ```

---

### Key Behaviors:
1. **Equality Comparison**:
   - Two references are equal only if they point to the same memory location.
   ```javascript
   const obj1 = { value: 10 };
   const obj2 = { value: 10 };
   console.log(obj1 === obj2); // Output: false (different references)
   ```

2. **Shallow Copy vs. Deep Copy**:
   - A **shallow copy** copies only the top-level reference.
   - A **deep copy** creates a completely independent copy of all nested structures.

   Example of a **shallow copy**:
   ```javascript
   const obj1 = { nested: { value: 10 } };
   const obj2 = { ...obj1 }; // Shallow copy
   obj2.nested.value = 20;
   console.log(obj1.nested.value); // Output: 20
   ```

   Example of a **deep copy** using `JSON`:
   ```javascript
   const obj1 = { nested: { value: 10 } };
   const obj2 = JSON.parse(JSON.stringify(obj1)); // Deep copy
   obj2.nested.value = 20;
   console.log(obj1.nested.value); // Output: 10
   ```

---

### Practical Implications:
- Reference types are efficient for handling large data structures because they avoid copying large chunks of memory.
- They can lead to unintended side effects if multiple variables share the same reference and one modifies the data.

